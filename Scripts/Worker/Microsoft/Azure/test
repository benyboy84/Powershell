<#
****************************************************************************************
Script to create all resources 
****************************************************************************************

.SYNOPSIS
Script to create all resources.

Version 0.0

.DESCRIPTION
This script is use to create all resources. 

This script use Microsoft AZ PowerShell module.

This script accepts 2 parameters.
-debug       This will generate display details informations in the Powershell window and a log file with the information related to the script execution.
-output      This will generate an output file instead of displaying information in the Powershell window.

.EXAMPLE
./.ps1 
./.ps1  -debug
./.ps1  -output

.NOTES
Author: Benoit Blais

.LINK
https://

#>

Param(
    [Switch]$Debug = $True,
    [String]$Output = $False
)

#Default action when an error occured
$ErrorActionPreference = "Stop"

# ********************************************************************************

####MANDATORY MANUAL CONFIGURATION

#Microsoft Azure region
$AzureRegion = ""

#Microsoft Azure subscription
$Subscription = ""

#Resource group names
$ResourceGroupNames = @("")

#Virtual network
$Vnets = @(
    New-Object PSObject -Property @{Name = ""; ResourceGroupName = ""; AddressPrefix = ""}
)

#DNS servers
#Leave it empty if no DNS server needs to be configured
$DNSServers = @("")

#Peering
#Comment object if no peer is required
#Gateway can be set to AllowGatewayTransit, UseRemoteGateways or leave empty 
$Peerings = @(
    New-Object PSObject -Property @{Name = ""; ResourceGroupName = ""; VirtualNetwork = ""; RemoteVirtualNetwork = ""; RemoteVirtualNetworkSubscription = "";  Gateway = ""}
)

#Subnets
#If no route table is needed, leave it empty
#Comment object if no subnet is required
$Subnets = @(
    New-Object PSObject -Property @{Name = ""; AddressPrefix = ""; VirtualNetwork = ""; RouteTable = ""}
)

#Route table
#Comment object if no route table are required
$RouteTables = @(
    New-Object PSObject -Property @{Name = ""; ResourceGroupName = ""}
)

#Route
#NextHopType can be: Internet, None, VirtualAppliance, VirtualApplianceGateway, VnetLocal
#Comment object if no route is required
$Routes = @(
    New-Object PSObject -Property @{RouteTable = ""; Name = ""; AdressPrefix = ""; NextHopType = ""; NextHopAddress = ""}
)

# *******************************************************************************

#Log function will allow to display colored information in the PowerShell window if 
#debug mode is $TRUE. It will create a log file with the information related to the 
#script execution if output contain a path.
#Parameters:
#$Text : Text added to the text file.
#$Error and $Warning: These switch need to be use to specify something else then an information.
Function Log {
    Param (
        [Parameter(Mandatory=$true)][String]$Text,
        [Switch]$Error,
        [Switch]$Warning
    )
    If($Error) {
        $Text = "ERROR   | $Text"
    }
    ElseIf($Warning) {
        $Text = "WARNING | $Text"
    }
    Else {
        $Text = "INFO    | $Text"
    }
    If ($Debug) {
        If($Error) {
            Write-Host $Text -ForegroundColor Red
        }ElseIf($Warning) {
            Write-Host $Text -ForegroundColor Yellow
        }Else {
            Write-Host $Text -ForegroundColor Green
        }
    }
    If ($Output) {
        Try {Add-Content $Log "$(Get-Date) | $Text"} Catch {$Null}
    }
}

# **********************************************************************************

#Log file
$ScriptPath = Split-Path -Parent -Path $MyInvocation.MyCommand.Definition
$ScriptNameAndExtension = $MyInvocation.MyCommand.Definition.Split("\") | Select-Object -Last 1
$ScriptName = $ScriptNameAndExtension.Split(".") | Select-Object -First 1
$TimeStamp = (Get-Date).ToString("yyyy-MM-dd_HH-mm")
$Log = "$($ScriptPath)\$($ScriptName)_$($TimeStamp).log"

#The Update-AzConfig cmdlet is used to disable the survey message.
Update-AzConfig -DisplayBreakingChangeWarning $false | Out-Null

Log -Text "Script begin."

#**************************************************************************************************
#Az PowerShell module installation
#************************************************************************************************** 

#Validating if Azure module is already installed.
Log -Text "Validating if Azure module is already installed."
$InstalledModule = Get-InstalledModule -Name Az -AllVersions -ErrorAction SilentlyContinue

If ($Null -eq $InstalledModule) {
    Try {
        #Microsoft Azure PowerShell module is not install. Installing PowerShell Module.
        Log -Text "Microsoft Azure PowerShell module is not install. Installing PowerShell Module."
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
        Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
        Log -Text "Microsoft Azure PowerShell module successfully installed."
    }
    Catch {
        Log -Text "Unable to install Azure PowerShell module. Script will exit." -Error
        Exit 1 
    }
}
Else {
    Log -Text "Microsoft Azure PowerShell module is already installed."
}

#**************************************************************************************************
#Connecting to Microsoft Azure
#************************************************************************************************** 

Log -Text "Connecting to Azure."
Try {
    Connect-AzAccount -Subscription $Subscription | Out-Null
    Log -Text "Successfully connected to Microsoft Azure."
}
Catch{
    Log -Text "Unable to login into Microsoft Azure. Script will exit." -Error
    Log -Text "Error:$($PSItem.Exception.Message)" -Error 
    Exit 1 
}
    
#**************************************************************************************************
#Creation of the resource groups
#**************************************************************************************************  

ForEach ($ResourceGroupName in $ResourceGroupNames) {    
    #Validating if resource group already exist.
    Log -Text "Validating if resource group $($ResourceGroupName) already exist."
    $AzResourceGroup = Get-AzResourceGroup -Name $ResourceGroupName -ErrorAction SilentlyContinue

    If ($Null -eq $AzResourceGroup) {
        #Creating the resource group.
        Log -Text "Creating ressourge group $($ResourceGroupName)."
        Try {
            New-AzResourceGroup -Name $ResourceGroupName -Location $AzureRegion | Out-Null
            Log -Text "Ressourge group $($ResourceGroupName) successfully created."
        }
        Catch {
            Log -Text "Unable to create resource group $($ResourceGroupName). Script will exit." -Error
            Log -Text "Error:$($PSItem.Exception.Message)" -Error
            Exit 1
        }
    }
    Else {
        If ($AzResourceGroup.Location -ne $AzureRegion) {
            Log -Text "Ressourge group $($ResourceGroupName) is not in the Microsoft Azure region $($AzureRegion)." -Warning
        }
        Else {
            Log -Text "Ressourge group $($ResourceGroupName) is properly configured."
        }
    }
}

#**************************************************************************************************
#Creation of the virtual network
#**************************************************************************************************

ForEach ($VNet in $VNets) {
    #Validating if virtual network already exist.
    Log -Text "Validating if virtual network $($VNet.Name) already exist."
    $AzVirtualNetwork = Get-AzVirtualNetwork -Name $VNet.Name -ErrorAction SilentlyContinue

    If ($Null -eq $AzVirtualNetwork) {
        #Creating Virtual network.
        Log -Text "Creating VNet $($Vnet.Name)."
        Try {
            New-AzVirtualNetwork -Name $Vnet.Name -ResourceGroupName $VNet.ResourceGroupName -Location $AzureRegion -AddressPrefix $Vnet.AddressPrefix | Out-Null
            Log -Text "VNet $($Vnet.Name) successfully created."
        }
        Catch {
            Log -Text "An error occurred during the creation of VNet $($Vnet.Name). Script will exit." -Error
            Log -Text "Error:$($PSItem.Exception.Message)" -Error
            Exit 1
        }
    }
    Else {
        $Exit = $False
        $Warning = $False
        If ($AzVirtualNetwork.ResourceGroupName -ne $VNet.ResourceGroupName) {
            $Warning = $True
            Log -Text "Virtual network $($Vnet.Name) is not in the resource group $($VNet.ResourceGroupName)." -Warning
        }
        If ($AzVirtualNetwork.Location -ne $AzureRegion) {
            $Exit = $True
            Log -Text "Virtual network $($Vnet.Name) is not in the Microsoft Azure region $($AzureRegion). Script will exit." -Error
        }
        If ($AzVirtualNetwork.AddressSpace.AddressPrefixes -ne $VNet.AddressPrefix) {
            $Exit = $True
            Log -Text "Virtual network $($Vnet.Name) does not have the address prefixes $($Vnet.AddressPrefix). Script will exit." -Error
        }
        If ($Exit) {
            Exit 1
        }
        ElseIf (!($Warning)) {
            Log -Text "Virtual network $($Vnet.Name) is properly configured."
        }
    }
}

#**************************************************************************************************
#DNS Configuration
#**************************************************************************************************

If ($DNSServers.Count -ne 0) {
    ForEach ($VNet in $VNets) {
        #Getting the VNet.
        Log -Text "Getting the VNet to configure DNS."
        Try {
            $VNet = Get-AzVirtualNetwork -Name $VNet.Name
        }
        Catch {
            Log -Text "Unable to get the virtual network $($VNet.Name)." -Error
            Log -Text "It will not be possible to configure DNS server for the virtual network $($VNet.Name)." -Error
            Continue
        }
        If ($Vnet.DhcpOptions.DnsServers.Count -eq 0) {
            #Configuring DNS server
            Log -Text "Configuring DNS servers for VNet $($Vnet.Name)"
            Try {
                $NewObject = New-Object -Type PSObject -Property @{"DnsServers" = $DNSServers }
                $VNet.DhcpOptions = $NewObject
                $VNet | Set-AzVirtualNetwork | Out-Null
                Log -Text "DNS server successfully configured for VNet $($VNet.Name)."
            }
            Catch {
                Log -Text "An error occurred during the configuration of DNS server for VNet $($VNet.Name). Script will exit." -Error
                Log -Text "Error:$($PSItem.Exception.Message)" -Error
                Exit 1
            }
        }
        Else {
            $Warning = $False
            ForEach ($DNSServer in $DnsServers) {
                If ($VNet.DhcpOptions.DnsServers -notcontains $DNSServer) {
                    $Warning = $True
                    Log -Text "$DNS server $($DNSServer) is not configured on VNet $($VNet.Name)." -Warning
                }
            }
            $Results = Compare-Object -ReferenceObject $VNet.DhcpOptions.DnsServers -DifferenceObject $DNSServers
            $Results = $Results | Where-Object {$_.SideIndicator -eq "<="}
            ForEach ($Result in $Results) {
                $Warning = $True
                Log -Text "$DNS server $($Result.InputObject) should not be configured on VNet $($VNet.Name)." -Warning
            }
            If (!($Warning)) {
                Log -Text "DNS server is properly configured on virtual network $($Vnet.Name)."
            }
        }
    }
}

#**************************************************************************************************
#Virtual network peering
#**************************************************************************************************

ForEach ($Peering in $Peerings) {
    #Getting the virtual networks for peering.
    Log -Text "Getting the virtual nerwotks for peering $($Peering.Name)."
    Try {
        Select-AzSubscription $Peering.RemoteVirtualNetworkSubscription | Out-Null
        $RemoteVirtualNetwork = Get-AzVirtualNetwork -Name $Peering.RemoteVirtualNetwork
        Select-AzSubscription $Subscription | Out-Null 
        $VirtualNetwork = Get-AzVirtualNetwork -Name $Peering.VirtualNetwork
    }
    Catch {
        Log -Text "Unable to get the virtual nerwotks for peering $($Peering.Name)." -Error
        Log -Text "It will ne be possible to create the peering $($Peering.Name)." -Error
        Continue
    }
    #Validating if peering already exist.
    Log -Text "Validating if peering $($Peering.Name) already exist."
    $Peer = Get-AzVirtualNetworkPeering -Name $Peering.Name -VirtualNetworkName $Peering.VirtualNetwork -ResourceGroupName $Peering.ResourceGroupName -ErrorAction SilentlyContinue
    If ($Null -eq $Peer) {
        #Creating peering.
        Log -Text "Creating peering $($Peering.Name)."
        Try {
            Switch ($Peering.Gateway) {
                "AllowGatewayTransit" {Add-AzVirtualNetworkPeering -Name $Peering.Name -VirtualNetwork $VirtualNetwork -RemoteVirtualNetworkId $RemoteVirtualNetwork.Id -AllowGatewayTransit | Out-Null}
                "UseRemoteGateways" {Add-AzVirtualNetworkPeering -Name $Peering.Name -VirtualNetwork $VirtualNetwork -RemoteVirtualNetworkId $RemoteVirtualNetwork.Id -UseRemoteGateways | Out-Null}
                default {Add-AzVirtualNetworkPeering -Name $Peering.Name -VirtualNetwork $VirtualNetwork -RemoteVirtualNetworkId $RemoteVirtualNetwork.Id | Out-Null}
            }
            Log -Text "Peering $($Peering.Name) successfully created."
        }
        Catch {
            Log -Text "An error occurred during the creation of the peering $($Peering.Name). Script will exit." -Error
            Log -Text "Error:$($PSItem.Exception.Message)" -Error
            Exit 1
        }
    }
    Else {
        #Peering with the same name exist.
        #Validating if peering is properly configured.
        $Exit = $False
        $Warning = $False
        If ($Peer.ResourceGroupName -ne $Peering.ResourceGroupName) {
            $Warning = $True
            Log -Text "Peering $($Peering.Name) is not in the resource group $($Peering.ResourceGroupName)." -Warning
        }
        If ($Peer.VirtualNetworkName -ne $Peering.VirtualNetwork) {
            $Exit = $True
            Log -Text "Peering $($Peering.Name) virtual network name is not $($Peering.VirtualNetwork). Script will exit." -Error
        }
        If ($Peer.RemoteVirtualNetwork.Id -ne $RemoteVirtualNetwork.Id) {
            $Exit = $True
            Log -Text "Peering $($Peering.Name) remote virtual network is not $($Peering.RemoteVirtualNetwork). Script will exit." -Error
        }
        Switch ($Peering.Gateway) {
            "AllowGatewayTransit" {
                If (!($Peer.AllowGatewayTransit)) {
                    $Exit = $True
                    Log -Text "Peering $($Peering.Name) does not allow gateway transit. Script will exit." -Error
                }
            }
            "UseRemoteGateways" {
                If (!($Peer.UseRemoteGateways)) {
                    $Exit = $True
                    Log -Text "Peering $($Peering.Name) does not allow used of remote gateway. Script will exit." -Error
                }
            }
            Default {
                If ($Peer.UseRemoteGateways) {
                    $Exit = $True
                    Log -Text "Peering $($Peering.Name) should not allow used of remote gateway. Script will exit." -Error
                }
                If ($Peer.AllowGatewayTransit) {
                    $Exit = $True
                    Log -Text "Peering $($Peering.Name) should not allow gateway transit. Script will exit." -Error
                }
            }
        }
        If ($Exit) {
            Exit 1
        }
        ElseIf (!($Warning)) {
            Log -Text "Peering $($Peering.Name) is properly configured."
        }
    }
}

#**************************************************************************************************
#Creation of the subnet
#**************************************************************************************************

#Creating subnets
ForEach ($Subnet in $Subnets) {
    #Getting the virtual network for this subnet.
    Log -Text "Getting the virtual network for subnet $($Subnet.Name)."
    Try {
        $VirtualNetwork = Get-AzVirtualNetwork -Name $Subnet.VirtualNetwork
    }
    Catch {
        Log -Test "Unable to get the virtual network $($Subnet.VirtualNetwork) for subnet $($Subnet.Name)." -Error
        Log -Text "It will not be possible to create subnet $($Subnet.Name)." -Error
        Continue
    }
    #Validating if subnet with the same name already exist.
    Log -Text "Validating if subnet $($Subnet.Name) already exist."
    $AzVirtualNetworkSubnetConfig = Get-AzVirtualNetworkSubnetConfig -VirtualNetwork $VirtualNetwork -Name $Subnet.Name -ErrorAction SilentlyContinue
    If ($Null -eq $AzVirtualNetworkSubnetConfig) {
        #Creating subnet.
        Log -Text "Creating subnet $($Subnet.Name)."
        Try {
            Add-AzVirtualNetworkSubnetConfig -Name $Subnet.Name -AddressPrefix $Subnet.AddressPrefix -VirtualNetwork $VirtualNetwork | Out-Null
            $VirtualNetwork | Set-AzVirtualNetwork | Out-Null
            Log -Text "Subnet $($Subnet.Name) successfully created."
        }
        Catch {
            Log -Text "An error occurred during the creation of subnet $($Subnet.Name). Script will exit." -Error
            Log -Text "Error:$($PSItem.Exception.Message)" -Error
            Exit 1
        }
    }
    Else {
        If ($AzVirtualNetworkSubnetConfig.AddressPrefix -ne $Subnet.AddressPrefix) {
            Log -Text "Subnet $($Subnet.Name) does not have the address prefix $($Vnet.AddressPrefix). Script will exit." -Error
            Exit 1
        }
        Else {
            Log -Text "Subnet $($Subnet.Name) is properly configured."
        }
    }
}

#**************************************************************************************************
#Creation of the route table
#**************************************************************************************************

ForEach ($RouteTable in $RouteTables) {
    #Validating if the route table already exist.
    Log -Text "Validating if the route table $($RTName) already exist."
    $RT = Get-AzRouteTable -Name $RouteTable.Name -ResourceGroupName $RouteTable.ResourceGroupName -ErrorAction SilentlyContinue
    If ($Null -eq $RT) {
        #Creating route table.
        Log -Text "Creating route table $($RouteTable.Name)."
        Try {
            New-AzRouteTable -Name $RouteTable.Name -ResourceGroupName $RouteTable.ResourceGroupName -Location $AzureRegion | Out-Null
            Log -Text "Routing table $($RouteTable.Name) successfully created."
        }
        Catch {
            Log -Text "An error occurred during the creation of the route table $($RouteTable.Name). Script will exit." -Error
            Log -Text "Error:$($PSItem.Exception.Message)" -Error
            Exit 1
        }
    }
    Else {
        $Exit = $False
        $Warning = $False
        If ($RT.ResourceGroupName -ne $RouteTable.ResourceGroupName) {
            $Warning = $True
            Log -Text "Route table $($RouteTable.Name) is not in the resource group $($RouteTable.ResourceGroupName)." -Warning
        }
        If ($RT.Location -ne $AzureRegion) {
            $Exit = $True
            Log -Text "Route table $($RouteTable.Name) is not in the Microsoft Azure region $($AzureRegion). Script will exit." -Error
        }
        If ($Exit) {
            Exit 1
        }
        ElseIf (!($Warning)) {
            Log -Text "Routing table $($RTName) is properly configured."
        }
    }
}

#**************************************************************************************************
#Assignment of route table to subnet
#**************************************************************************************************

$AssignedTo = $Subnets | Where-Object {$_.RouteTable -ne ""}
ForEach($Assignment in $AssignedTo) {
    #Getting the subnet for route table.
    Log -Text "Getting required information to assign route table $($Assignment.RouteTable) to $($Assignment.Name)."
    Try {
        $VNet = Get-AzVirtualNetwork -Name $Assignment.VirtualNetwork 
        $Subnet = Get-AzVirtualNetworkSubnetConfig -VirtualNetwork $VNet -Name $Assignment.Name
        $RT = Get-AzRouteTable -Name $Assignment.RouteTable 
    }
    Catch {
        Log -Text "Unable to get the subnet $($Assignment.Name) for route table." -Error
        Log -Text "It will ne be possible to create the route table $($Assignment.RouteTable)." -Error
        Continue
    }
    If ($Null -eq $Subnet.RouteTable) {
        Try{
            #Assignment of the route table to the subnet.
            Log -Text "Assignment of the route table $($Assignment.RouteTable) to the subnet $($Assignment.Name)."
            Set-AzVirtualNetworkSubnetConfig -VirtualNetwork $VNet -AddressPrefix $Assignment.AddressPrefix -Name $Assignment.Name -RouteTable $RT | Out-Null
            $VNet | Set-AzVirtualNetwork | Out-Null
            Log -Text "Route table $($Assignment.RouteTable) successfully assigne to $($Assignment.Name) subnet."
        }
        Catch {
            Log -Text "An error occurred during the assignment of the route table $($Assignment.RouteTable) to subnet $($Assignment.Name). Script will exit." -Error
            Log -Text "Error:$($PSItem.Exception.Message)" -Error
            Exit 1
        }
    }
    Else {
        If ($Subnet.RouteTable.Id -notmatch $Assignment.RouteTable) {
            Log -Text "Subnet $($Assignment.Name) does not have the route table $($Assignment.RouteTable) assigned to it." -Warning
        }
        Else {
            Log -Text "Route table is assigned to subnet $($Assignment.Name)."
        }
    }
}

#**************************************************************************************************
#Route creation
#**************************************************************************************************

ForEach ($Route in $Routes) {
    #Getting route table for route.
    Log -Text "Getting route table $($Route.RouteTable) for route $($Route.Name)."
    Try {
        $RT = Get-AzRouteTable -Name $Route.RouteTable
    }
    Catch {
        Log -Text "Unable to get the route table $($Route.RouteTable) for route $($Route.Name)." -Error
        Log -Text "It will ne be possible to create the route $($Route.Name)." -Error
        Continue
    }
    #Validating if route already exist in route table.
    Log -Text "Validating if route already exist in route table $($RT.Name)."
    $RouteConfig = Get-AzRouteConfig -RouteTable $RT -ErrorAction SilentlyContinue
    If ($Null -eq $RouteConfig) {
        #Creating route.
        Log -Text "No route exist in route table $($RT.Name)."
        Log -Text "Creating route."
        If ($Route.NextHopType -eq "VirtualAppliance") {
            If ($Route.NextHopAddress -ne "") {
                Try {
                    $RT | Add-AzRouteConfig -Name $Route.Name -AddressPrefix $Route.AdressPrefix -NextHopType $Route.NextHopType -NextHopIpAddress $Route.NextHopAddress | Set-AzRouteTable | Out-Null
                    Log -Text "Route $($Route.Name) successfully created."
                }
                Catch {
                    Log -Text "An error occurred during the creation of route table $($Route.Name). Script will exit." -Error
                    Log -Text "Error:$($PSItem.Exception.Message)" -Error
                    Exit 1 
                }
            }
            Else {
                Log -Text "Next hop Ip address can't be empty when next hop type is virrtuel appliance." -Error
            }
        }
        Else {
            Try {
                $RT | Add-AzRouteConfig -Name $Route.Name -AddressPrefix $Route.AdressPrefix -NextHopType $Route.NextHopType | Set-AzRouteTable | Out-Null
                Log -Text "Route $($Route.Name) successfully created."
            }
            Catch {
                Log -Text "An error occurred during the creation of route table $($Route.Name). Script will exit." -Error
                Log -Text "Error:$($PSItem.Exception.Message)" -Error
                Exit 1 
            }
        }
    }
    Else {
        $Warning = $False
        $RouteConfig = Get-AzRouteConfig -RouteTable $RT -Name $Route.Name -ErrorAction SilentlyContinue
        If ($Null -eq $RouteConfig) {
            #Route with same name does not exist.
            $RouteConfig = Get-AzRouteConfig -RouteTable $RT | Where-Object {$_.AddressPrefix -eq $Route.AdressPrefix}
            If($Null -eq $RouteConfig) {
                #No route with same prefix exist
                $RouteConfig = $RouteConfig | Where-Object {$_.NextHopType -eq $Route.NextHopType}
                If ($Null -eq $RouteConfig) {
                    #No route with same next hop exist
                    #Creating route
                    Log -Text "Creating route."
                        If ($Route.NextHopType -eq "VirtualAppliance") {
                            If ($Route.NextHopAddress -ne "") {
                                Try {
                                    $RT | Add-AzRouteConfig -Name $Route.Name -AddressPrefix $Route.AdressPrefix -NextHopType $Route.NextHopType -NextHopIpAddress $Route.NextHopAddress | Set-AzRouteTable | Out-Null
                                    Log -Text "Route $($Route.Name) successfully created."
                                }
                                Catch {
                                    Log -Text "An error occurred during the creation of route table $($Route.Name). Script will exit." -Error
                                    Log -Text "Error:$($PSItem.Exception.Message)" -Error
                                    Exit 1 
                                }
                            }
                            Else {
                                Log -Text "Next hop Ip address can't be empty when next hop type is virtual appliance." -Error
                            }
                        }
                        Else {
                            Try {
                                $RT | Add-AzRouteConfig -Name $Route.Name -AddressPrefix $Route.AdressPrefix -NextHopType $Route.NextHopType | Set-AzRouteTable | Out-Null
                                Log -Text "Route $($Route.Name) successfully created."
                            }
                            Catch {
                                Log -Text "An error occurred during the creation of route table $($Route.Name). Script will exit." -Error
                                Log -Text "Error:$($PSItem.Exception.Message)" -Error
                                Exit 1 
                            }
                        }
                }
             }
            Else {
                #Route with same address prefix already exist.
                #Validating if route with same prefix have only the wrong name.
                If ($RouteConfig.Name -ne $Route.Name) {
                    $Warning = $True
                    Log -Text "Name for route with address prefix $($Route.AdressPrefix) is not $($Route.Name)." -Warning
                }
                If ($RouteConfig.NextHopType -ne $Route.NextHopType) {
                    $Warning = $True
                    Log -Text "Next hop type for route with address prefix $($Route.AdressPrefix) is not $($Route.NextHopType)." -Warning
                }
                If ($RouteConfig.NextHopType -eq "VirtualAppliance") {
                    If ($RouteConfig.NextHopAddress -ne $Route.NextHopAddress) {
                        $Warning = $True
                        Log -Text "Next hop ip address for route with address prefix $($Route.AdressPrefix) is not $($Route.NextHopAddress)." -Warning
                    }
                }
            }
        }
        Else {
            #Route with the same name exist.
            #Validating if adress prefix is properly configured.
            If ($RouteConfig.AddressPrefix -ne $Route.AdressPrefix) {
                $Warning = $True
                Log -Text "Address prefix for route $($Route.Name) is not $($Route.AdressPrefix)." -Warning
            }
            If ($RouteConfig.NextHopType -ne $Route.NextHopType) {
                $Warning = $True
                Log -Text "Next hop type for route $($Route.Name) is not $($Route.NextHopType)." -Warning
            }
            If ($RouteConfig.NextHopType -eq "VirtualAppliance") {
                If ($RouteConfig.NextHopIpAddress -ne $Route.NextHopAddress) {
                    $Warning = $True
                    Log -Text "Next hop ip address for route $($Route.Name) is not $($Route.NextHopAddress)." -Warning
                }
            }
            If (!($Warning)) {
                Log -Text "Route $($Route.Name) is properly configured."
            }
        }
    }
}


